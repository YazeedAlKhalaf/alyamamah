// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/feedback_svc.proto

package feedbacksvcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FeedbackSvc_CreateFeedback_FullMethodName        = "/FeedbackSvc/CreateFeedback"
	FeedbackSvc_GetFeedbackById_FullMethodName       = "/FeedbackSvc/GetFeedbackById"
	FeedbackSvc_GetFeedbackByUserId_FullMethodName   = "/FeedbackSvc/GetFeedbackByUserId"
	FeedbackSvc_GetFeedbackCategories_FullMethodName = "/FeedbackSvc/GetFeedbackCategories"
)

// FeedbackSvcClient is the client API for FeedbackSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedbackSvcClient interface {
	CreateFeedback(ctx context.Context, in *CreateFeedbackRequest, opts ...grpc.CallOption) (*CreateFeedbackResponse, error)
	GetFeedbackById(ctx context.Context, in *GetFeedbackByIdRequest, opts ...grpc.CallOption) (*GetFeedbackByIdResponse, error)
	GetFeedbackByUserId(ctx context.Context, in *GetFeedbackByUserIdRequest, opts ...grpc.CallOption) (*GetFeedbackByUserIdResponse, error)
	GetFeedbackCategories(ctx context.Context, in *GetFeedbackCategoriesRequest, opts ...grpc.CallOption) (*GetFeedbackCategoriesResponse, error)
}

type feedbackSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedbackSvcClient(cc grpc.ClientConnInterface) FeedbackSvcClient {
	return &feedbackSvcClient{cc}
}

func (c *feedbackSvcClient) CreateFeedback(ctx context.Context, in *CreateFeedbackRequest, opts ...grpc.CallOption) (*CreateFeedbackResponse, error) {
	out := new(CreateFeedbackResponse)
	err := c.cc.Invoke(ctx, FeedbackSvc_CreateFeedback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackSvcClient) GetFeedbackById(ctx context.Context, in *GetFeedbackByIdRequest, opts ...grpc.CallOption) (*GetFeedbackByIdResponse, error) {
	out := new(GetFeedbackByIdResponse)
	err := c.cc.Invoke(ctx, FeedbackSvc_GetFeedbackById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackSvcClient) GetFeedbackByUserId(ctx context.Context, in *GetFeedbackByUserIdRequest, opts ...grpc.CallOption) (*GetFeedbackByUserIdResponse, error) {
	out := new(GetFeedbackByUserIdResponse)
	err := c.cc.Invoke(ctx, FeedbackSvc_GetFeedbackByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackSvcClient) GetFeedbackCategories(ctx context.Context, in *GetFeedbackCategoriesRequest, opts ...grpc.CallOption) (*GetFeedbackCategoriesResponse, error) {
	out := new(GetFeedbackCategoriesResponse)
	err := c.cc.Invoke(ctx, FeedbackSvc_GetFeedbackCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbackSvcServer is the server API for FeedbackSvc service.
// All implementations must embed UnimplementedFeedbackSvcServer
// for forward compatibility
type FeedbackSvcServer interface {
	CreateFeedback(context.Context, *CreateFeedbackRequest) (*CreateFeedbackResponse, error)
	GetFeedbackById(context.Context, *GetFeedbackByIdRequest) (*GetFeedbackByIdResponse, error)
	GetFeedbackByUserId(context.Context, *GetFeedbackByUserIdRequest) (*GetFeedbackByUserIdResponse, error)
	GetFeedbackCategories(context.Context, *GetFeedbackCategoriesRequest) (*GetFeedbackCategoriesResponse, error)
	mustEmbedUnimplementedFeedbackSvcServer()
}

// UnimplementedFeedbackSvcServer must be embedded to have forward compatible implementations.
type UnimplementedFeedbackSvcServer struct {
}

func (UnimplementedFeedbackSvcServer) CreateFeedback(context.Context, *CreateFeedbackRequest) (*CreateFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedback not implemented")
}
func (UnimplementedFeedbackSvcServer) GetFeedbackById(context.Context, *GetFeedbackByIdRequest) (*GetFeedbackByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedbackById not implemented")
}
func (UnimplementedFeedbackSvcServer) GetFeedbackByUserId(context.Context, *GetFeedbackByUserIdRequest) (*GetFeedbackByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedbackByUserId not implemented")
}
func (UnimplementedFeedbackSvcServer) GetFeedbackCategories(context.Context, *GetFeedbackCategoriesRequest) (*GetFeedbackCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedbackCategories not implemented")
}
func (UnimplementedFeedbackSvcServer) mustEmbedUnimplementedFeedbackSvcServer() {}

// UnsafeFeedbackSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedbackSvcServer will
// result in compilation errors.
type UnsafeFeedbackSvcServer interface {
	mustEmbedUnimplementedFeedbackSvcServer()
}

func RegisterFeedbackSvcServer(s grpc.ServiceRegistrar, srv FeedbackSvcServer) {
	s.RegisterService(&FeedbackSvc_ServiceDesc, srv)
}

func _FeedbackSvc_CreateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackSvcServer).CreateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackSvc_CreateFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackSvcServer).CreateFeedback(ctx, req.(*CreateFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackSvc_GetFeedbackById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedbackByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackSvcServer).GetFeedbackById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackSvc_GetFeedbackById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackSvcServer).GetFeedbackById(ctx, req.(*GetFeedbackByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackSvc_GetFeedbackByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedbackByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackSvcServer).GetFeedbackByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackSvc_GetFeedbackByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackSvcServer).GetFeedbackByUserId(ctx, req.(*GetFeedbackByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackSvc_GetFeedbackCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedbackCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackSvcServer).GetFeedbackCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackSvc_GetFeedbackCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackSvcServer).GetFeedbackCategories(ctx, req.(*GetFeedbackCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedbackSvc_ServiceDesc is the grpc.ServiceDesc for FeedbackSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedbackSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FeedbackSvc",
	HandlerType: (*FeedbackSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeedback",
			Handler:    _FeedbackSvc_CreateFeedback_Handler,
		},
		{
			MethodName: "GetFeedbackById",
			Handler:    _FeedbackSvc_GetFeedbackById_Handler,
		},
		{
			MethodName: "GetFeedbackByUserId",
			Handler:    _FeedbackSvc_GetFeedbackByUserId_Handler,
		},
		{
			MethodName: "GetFeedbackCategories",
			Handler:    _FeedbackSvc_GetFeedbackCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/feedback_svc.proto",
}
