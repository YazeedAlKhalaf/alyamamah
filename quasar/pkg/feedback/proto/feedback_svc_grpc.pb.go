// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/feedback_svc.proto

package feedbacksvcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FeedbackSvc_SvcCreateFeedback_FullMethodName        = "/FeedbackSvc/SvcCreateFeedback"
	FeedbackSvc_SvcGetFeedbackById_FullMethodName       = "/FeedbackSvc/SvcGetFeedbackById"
	FeedbackSvc_SvcGetFeedbackByUserId_FullMethodName   = "/FeedbackSvc/SvcGetFeedbackByUserId"
	FeedbackSvc_SvcGetFeedbackCategories_FullMethodName = "/FeedbackSvc/SvcGetFeedbackCategories"
)

// FeedbackSvcClient is the client API for FeedbackSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedbackSvcClient interface {
	SvcCreateFeedback(ctx context.Context, in *SvcCreateFeedbackRequest, opts ...grpc.CallOption) (*SvcCreateFeedbackResponse, error)
	SvcGetFeedbackById(ctx context.Context, in *SvcGetFeedbackByIdRequest, opts ...grpc.CallOption) (*SvcGetFeedbackByIdResponse, error)
	SvcGetFeedbackByUserId(ctx context.Context, in *SvcGetFeedbackByUserIdRequest, opts ...grpc.CallOption) (*SvcGetFeedbackByUserIdResponse, error)
	SvcGetFeedbackCategories(ctx context.Context, in *SvcGetFeedbackCategoriesRequest, opts ...grpc.CallOption) (*SvcGetFeedbackCategoriesResponse, error)
}

type feedbackSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedbackSvcClient(cc grpc.ClientConnInterface) FeedbackSvcClient {
	return &feedbackSvcClient{cc}
}

func (c *feedbackSvcClient) SvcCreateFeedback(ctx context.Context, in *SvcCreateFeedbackRequest, opts ...grpc.CallOption) (*SvcCreateFeedbackResponse, error) {
	out := new(SvcCreateFeedbackResponse)
	err := c.cc.Invoke(ctx, FeedbackSvc_SvcCreateFeedback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackSvcClient) SvcGetFeedbackById(ctx context.Context, in *SvcGetFeedbackByIdRequest, opts ...grpc.CallOption) (*SvcGetFeedbackByIdResponse, error) {
	out := new(SvcGetFeedbackByIdResponse)
	err := c.cc.Invoke(ctx, FeedbackSvc_SvcGetFeedbackById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackSvcClient) SvcGetFeedbackByUserId(ctx context.Context, in *SvcGetFeedbackByUserIdRequest, opts ...grpc.CallOption) (*SvcGetFeedbackByUserIdResponse, error) {
	out := new(SvcGetFeedbackByUserIdResponse)
	err := c.cc.Invoke(ctx, FeedbackSvc_SvcGetFeedbackByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackSvcClient) SvcGetFeedbackCategories(ctx context.Context, in *SvcGetFeedbackCategoriesRequest, opts ...grpc.CallOption) (*SvcGetFeedbackCategoriesResponse, error) {
	out := new(SvcGetFeedbackCategoriesResponse)
	err := c.cc.Invoke(ctx, FeedbackSvc_SvcGetFeedbackCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbackSvcServer is the server API for FeedbackSvc service.
// All implementations must embed UnimplementedFeedbackSvcServer
// for forward compatibility
type FeedbackSvcServer interface {
	SvcCreateFeedback(context.Context, *SvcCreateFeedbackRequest) (*SvcCreateFeedbackResponse, error)
	SvcGetFeedbackById(context.Context, *SvcGetFeedbackByIdRequest) (*SvcGetFeedbackByIdResponse, error)
	SvcGetFeedbackByUserId(context.Context, *SvcGetFeedbackByUserIdRequest) (*SvcGetFeedbackByUserIdResponse, error)
	SvcGetFeedbackCategories(context.Context, *SvcGetFeedbackCategoriesRequest) (*SvcGetFeedbackCategoriesResponse, error)
	mustEmbedUnimplementedFeedbackSvcServer()
}

// UnimplementedFeedbackSvcServer must be embedded to have forward compatible implementations.
type UnimplementedFeedbackSvcServer struct {
}

func (UnimplementedFeedbackSvcServer) SvcCreateFeedback(context.Context, *SvcCreateFeedbackRequest) (*SvcCreateFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SvcCreateFeedback not implemented")
}
func (UnimplementedFeedbackSvcServer) SvcGetFeedbackById(context.Context, *SvcGetFeedbackByIdRequest) (*SvcGetFeedbackByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SvcGetFeedbackById not implemented")
}
func (UnimplementedFeedbackSvcServer) SvcGetFeedbackByUserId(context.Context, *SvcGetFeedbackByUserIdRequest) (*SvcGetFeedbackByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SvcGetFeedbackByUserId not implemented")
}
func (UnimplementedFeedbackSvcServer) SvcGetFeedbackCategories(context.Context, *SvcGetFeedbackCategoriesRequest) (*SvcGetFeedbackCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SvcGetFeedbackCategories not implemented")
}
func (UnimplementedFeedbackSvcServer) mustEmbedUnimplementedFeedbackSvcServer() {}

// UnsafeFeedbackSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedbackSvcServer will
// result in compilation errors.
type UnsafeFeedbackSvcServer interface {
	mustEmbedUnimplementedFeedbackSvcServer()
}

func RegisterFeedbackSvcServer(s grpc.ServiceRegistrar, srv FeedbackSvcServer) {
	s.RegisterService(&FeedbackSvc_ServiceDesc, srv)
}

func _FeedbackSvc_SvcCreateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcCreateFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackSvcServer).SvcCreateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackSvc_SvcCreateFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackSvcServer).SvcCreateFeedback(ctx, req.(*SvcCreateFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackSvc_SvcGetFeedbackById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcGetFeedbackByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackSvcServer).SvcGetFeedbackById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackSvc_SvcGetFeedbackById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackSvcServer).SvcGetFeedbackById(ctx, req.(*SvcGetFeedbackByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackSvc_SvcGetFeedbackByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcGetFeedbackByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackSvcServer).SvcGetFeedbackByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackSvc_SvcGetFeedbackByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackSvcServer).SvcGetFeedbackByUserId(ctx, req.(*SvcGetFeedbackByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackSvc_SvcGetFeedbackCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcGetFeedbackCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackSvcServer).SvcGetFeedbackCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackSvc_SvcGetFeedbackCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackSvcServer).SvcGetFeedbackCategories(ctx, req.(*SvcGetFeedbackCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedbackSvc_ServiceDesc is the grpc.ServiceDesc for FeedbackSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedbackSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FeedbackSvc",
	HandlerType: (*FeedbackSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SvcCreateFeedback",
			Handler:    _FeedbackSvc_SvcCreateFeedback_Handler,
		},
		{
			MethodName: "SvcGetFeedbackById",
			Handler:    _FeedbackSvc_SvcGetFeedbackById_Handler,
		},
		{
			MethodName: "SvcGetFeedbackByUserId",
			Handler:    _FeedbackSvc_SvcGetFeedbackByUserId_Handler,
		},
		{
			MethodName: "SvcGetFeedbackCategories",
			Handler:    _FeedbackSvc_SvcGetFeedbackCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/feedback_svc.proto",
}
