// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: feedback.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createFeedback = `-- name: CreateFeedback :one
INSERT INTO feedback (user_id, category_id, title, body)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, category_id, title, body, created_at, updated_at
`

type CreateFeedbackParams struct {
	UserID     uuid.UUID
	CategoryID uuid.UUID
	Title      string
	Body       string
}

func (q *Queries) CreateFeedback(ctx context.Context, arg CreateFeedbackParams) (Feedback, error) {
	row := q.db.QueryRowContext(ctx, createFeedback,
		arg.UserID,
		arg.CategoryID,
		arg.Title,
		arg.Body,
	)
	var i Feedback
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeedbackById = `-- name: GetFeedbackById :one
SELECT id, user_id, category_id, title, body, created_at, updated_at FROM feedback
WHERE id = $1
`

func (q *Queries) GetFeedbackById(ctx context.Context, id uuid.UUID) (Feedback, error) {
	row := q.db.QueryRowContext(ctx, getFeedbackById, id)
	var i Feedback
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFeedbackByUserId = `-- name: ListFeedbackByUserId :many
SELECT id, user_id, category_id, title, body, created_at, updated_at FROM feedback
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListFeedbackByUserId(ctx context.Context, userID uuid.UUID) ([]Feedback, error) {
	rows, err := q.db.QueryContext(ctx, listFeedbackByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feedback
	for rows.Next() {
		var i Feedback
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CategoryID,
			&i.Title,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
