// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, fcm_token)
VALUES ($1, $2)
RETURNING id, username, fcm_token, created_at, updated_at
`

type CreateUserParams struct {
	Username string
	FcmToken sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.FcmToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FcmToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, fcm_token, created_at, updated_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FcmToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFcmTokenByUsername = `-- name: UpdateFcmTokenByUsername :one
UPDATE users
SET fcm_token = $1
WHERE username = $2
RETURNING id, username, fcm_token, created_at, updated_at
`

type UpdateFcmTokenByUsernameParams struct {
	FcmToken sql.NullString
	Username string
}

func (q *Queries) UpdateFcmTokenByUsername(ctx context.Context, arg UpdateFcmTokenByUsernameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateFcmTokenByUsername, arg.FcmToken, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FcmToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
